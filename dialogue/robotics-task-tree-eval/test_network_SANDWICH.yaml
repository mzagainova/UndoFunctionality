# typedef enum {  // Eight possible node types
#   THEN = 0,     // 0
#   OR,           // 1
#   AND,          // 2
#   BEHAVIOR,     // 3
#   ROOT,         // 4
#   PLACE,        // 5
# } NodeTypes_t;

# typedef enum {  // Eight possible robots
#   PR2 = 0, // 0
#   BAXTER,  // 1
# } RobotTypes;

NodeList: ['ROOT_4_0_000',
           'THEN_0_0_001', 
           'PLACE_3_0_002', 
           'OR_1_0_003', 
           'PLACE_3_0_004', 
           'PLACE_3_0_005', 
           'PLACE_3_0_006',
           'ROOT_4_1_007',
           'THEN_0_1_008', 
           'PLACE_3_1_009', 
           'OR_1_1_010', 
           'PLACE_3_1_011', 
           'PLACE_3_1_012', 
           'PLACE_3_1_013' ]

Nodes: 
  ROOT_4_0_000:
    mask:
      type: 4
      robot: 0
      node: 0
    parent: 'NONE'
    children: ['THEN_0_0_001']
    peers: ['ROOT_4_1_007']
  
  THEN_0_0_001:
    mask:
      type: 0
      robot: 0
      node: 1
    parent: ROOT_4_0_000
    children: ['PLACE_3_0_002', 'OR_1_0_003', 'PLACE_3_0_006']
    peers: ['THEN_0_1_008']
  PLACE_3_0_002:
    mask:
      type: 5
      robot: 0
      node: 2
    parent: THEN_0_0_001
    # children: ['NONE']
    peers: ['PLACE_3_1_009']
    object: Left_Bread
  OR_1_0_003:
    mask:
      type: 1
      robot: 0
      node: 3
    parent: THEN_0_0_001
    children: ['PLACE_3_0_004', 'PLACE_3_0_005']
    peers: ['OR_1_1_010']
  PLACE_3_0_004:
    mask:
      type: 5
      robot: 0
      node: 4
    parent: OR_1_0_003
    # children: ['NONE']
    peers: ['PLACE_3_1_011','PLACE_3_1_012']
    object: Meat
  PLACE_3_0_005:
    mask:
      type: 5
      robot: 0
      node: 5
    parent: OR_1_0_003
    # children: ['NONE']
    peers: ['PLACE_3_1_011','PLACE_3_1_012']
    object: Lettuce
  PLACE_3_0_006:
    mask:
      type: 5
      robot: 0
      node: 6
    parent: THEN_0_0_001
    # children: ['NONE']
    peers: ['PLACE_3_1_013']
    object: Right_Bread

#-----------------------------------

  ROOT_4_1_007:
    mask:
      type: 4
      robot: 1
      node: 7
    parent: 'NONE'
    children: ['THEN_0_1_008']
    peers: ['ROOT_4_0_000']
  
  THEN_0_1_008:
    mask:
      type: 0
      robot: 1
      node: 8
    parent: ROOT_4_1_007
    children: ['PLACE_3_1_009', 'OR_1_1_010', 'PLACE_3_1_013']
    peers: ['THEN_0_0_001']
  PLACE_3_1_009:
    mask:
      type: 5
      robot: 1
      node: 9
    parent: THEN_0_1_008
    # children: ['NONE']
    peers: ['PLACE_3_0_002']
    object: Left_Bread
  OR_1_1_010:
    mask:
      type: 1
      robot: 1
      node: 10
    parent: THEN_0_1_008
    children: ['PLACE_3_1_011', 'PLACE_3_1_012']
    peers: ['OR_1_0_003']
  PLACE_3_1_011:
    mask:
      type: 5
      robot: 1
      node: 11
    parent: OR_1_1_010
    # children: ['NONE']
    peers: ['PLACE_3_0_004', 'PLACE_3_0_005']
    object: Meat
  PLACE_3_1_012:
    mask:
      type: 5
      robot: 1
      node: 12
    parent: OR_1_1_010
    # children: ['NONE']
    peers: ['PLACE_3_0_004', 'PLACE_3_0_005']
    object: Lettuce
  PLACE_3_1_013:
    mask:
      type: 5
      robot: 1
      node: 13
    parent: THEN_0_1_008
    # children: ['NONE']
    peers: ['PLACE_3_0_006']
    object: Right_Bread


